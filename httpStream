package com.example.migration.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.stream.Stream;
@RestController
public class DataController {

    @PostMapping("/stream-data")
    public ResponseEntity<StreamingResponseBody> streamData(@RequestBody String request) {
        System.out.println(request);
        // Fetch your data
        Stream<String> dataStream = fetchDataAsStream();

        // Set appropriate headers
        ResponseEntity<StreamingResponseBody> response = ResponseEntity
                .status(HttpStatus.OK)
                .header("Content-Disposition", "attachment; filename=data.txt")
                .body(outputStream -> writeDataToStream(dataStream, outputStream));

        return response;
    }

    private void writeDataToStream(Stream<String> dataStream, OutputStream outputStream) throws IOException {
        dataStream.forEachOrdered(data -> {
            try {
                outputStream.write(data.getBytes());
                outputStream.write(System.lineSeparator().getBytes()); // Add newline separator
                outputStream.flush(); // Flush to ensure data is sent immediately
                Thread.sleep(3000);
            } catch (IOException e) {
                // Handle any exceptions
                e.printStackTrace();
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        });
    }

    // Dummy method to fetch data as a stream
    private Stream<String> fetchDataAsStream() {
        // Implement fetching your large dataset as a stream
        // Example:



        return Stream.of("Data1", "Data2", "Data3"); // Replace with actual data fetching logic
    }


    @GetMapping("/test")
    public String test() throws IOException, InterruptedException {



        try {
            // URL of the web service
            URL url = new URL("http://localhost:8001/stream-data");

            // Open connection
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set request method to POST
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);

            // JSON request body
            String jsonRequestBody = "{\"key\":\"value\"}";

            // Write JSON data to the connection output stream
            try (OutputStream outputStream = connection.getOutputStream()) {
                outputStream.write(jsonRequestBody.getBytes());
            }

            // Get response code
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Get input stream from the connection
                InputStream inputStream = connection.getInputStream();

                // Wrap input stream in a BufferedReader
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

                // Read data line by line
                String line;
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                }

                // Close resources
                reader.close();
                inputStream.close();
            } else {
                System.out.println("Failed to retrieve data. Response code: " + responseCode);
            }

            // Close connection
            connection.disconnect();

        } catch (IOException e) {
            e.printStackTrace();
        }



        return "done";
    }
}
